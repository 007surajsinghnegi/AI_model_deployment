# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VhLwuOCpK9eyLm86wCd8fLZve0xUcJRl
"""

#from google.colab import drive
#drive.mount('/content/drive')

#! pip install flask-ngrok

import socket
print(socket.gethostbyname(socket.gethostname()))

import flask
flask.__version__

from flask import Flask, render_template, request
#from flask_ngrok import run_with_ngrok

# resize is option as target size in load_img
from keras.preprocessing.image import save_img, load_img
import numpy as np
import keras.models
import re

import sys
import os

sys.path.append(os.path.abspath('./model'))

import threading
from load import *

app = Flask(__name__)
#run_with_ngrok(app)

global model, graph
model, graph = init()

def convertImage(imgData1):
	imgstr = re.search(r'base64,(.*)',imgData1).group(1)
	with open('output.png','wb') as output:
		output.write(imgstr.decode('base64'))

@app.route('/')
#def hello():
#  return "I am alive!"
def index():
  return render_template('index.html')

@app.route('/predict/', methods = ['GET', 'POST'])
def predict():
  imgData = request.get_data()
  convertImage(imgData)
  x = load_img('out.png', mode = 'L', target_size=(28,28))
  x = np.invert(x)
  x = x.reshape(1, 28, 28, 1)

  with graph.as_default():
    out = model.predict(x)
    response = np.array_str(np.argmax(out))
    return response

if __name__ =="__main__":
  app.run()
#threading.Thread(target=app.run, kwargs={'host':'0.0.0.0','port':6000}).start()

#import requests
#req = requests.get("http://172.28.0.2:6000/")
#print(req.status_code)
#print(req.text)

#! pip install pip install pyngrok

#! ngrok authtoken 1heT5swp9M03nslDyozwIJSVCOi_3qDj4mBiY81UzMyCGXF54

#from pyngrok import ngrok
#public_url = ngrok.connect(port = '6000')
#ssh_url = ngrok.connect(22, "tcp")

#public_url

#ngrok.kill
